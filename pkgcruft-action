#!/usr/bin/env bash

# disable github action bash shell default `set -e`
set +e

# run scanning in a subshell with `set -e` enabled
(
	set -e

	# TODO: replace with native pkgcraft repo syncing functionality
	# see https://github.com/pkgcraft/pkgcruft-action/issues/2
	GENTOO_REPO="${HOME}/.cache/pkgcraft/repos/gentoo"
	mkdir -p "${GENTOO_REPO}"
	curl -sL https://github.com/gentoo-mirror/gentoo/archive/stable.tar.gz | tar -zxf - --strip-components=1 -C "${GENTOO_REPO}"
	dir=$(mktemp -d)
	cat <<- EOF > "${dir}/repos.conf"
	[DEFAULT]
	main-repo = gentoo
	[gentoo]
	location = "${GENTOO_REPO}"
	EOF
	sudo mv "${dir}" /etc/portage

	# TODO: incorporate custom metadata dir into `pkgcruft scan` option
	mkdir -p ~/.cache/pkgcruft/md5-cache metadata/md5-cache
	sudo mount -o bind ~/.cache/pkgcruft/md5-cache metadata/md5-cache

	# set up cache files
	FILE=$(mktemp)
	CACHE="${HOME}/.cache/pkgcruft/scans"
	mkdir -p "${CACHE}"

	# determine target commit
	cd "${REPO}"
	NEW_COMMIT=$(git rev-parse HEAD)
	NEW_COMMIT_SHORT=$(git rev-parse --short HEAD)

	echo Running pkgcruft: ${NEW_COMMIT}
	pkgcruft scan -R json > "${FILE}"

	echo Current pkgcruft results: ${NEW_COMMIT}
	pkgcruft replay --color --sort "${FILE}"

	# determine old commit for diff targeting
	if [[ -n ${GIT_BASE_BRANCH} ]]; then
		# pull request
		OLD_COMMIT=$(git rev-parse ${GIT_BASE_BRANCH})
	elif [[ ${GIT_BRANCH} != ${GIT_DEFAULT_BRANCH} ]]; then
		# non-default branch
		OLD_COMMIT=$(git rev-parse ${GIT_DEFAULT_BRANCH})
	else
		OLD_COMMIT=$(git rev-parse HEAD~1)
	fi

	# Generate results for old commit if they don't exist
	if [[ ! -f ${CACHE}/${OLD_COMMIT} ]]; then
		echo Running pkgcruft for diff targeting: ${OLD_COMMIT}
		git checkout ${OLD_COMMIT}
		pkgcruft scan -R json > "${CACHE}/${OLD_COMMIT}"
	fi

	# output diff if changes exists
	diff=$(mktemp)
	pkgcruft diff --color --sort "${CACHE}/${OLD_COMMIT}" "${FILE}" > "${diff}"
	if [[ -s ${diff} ]]; then
		echo Differences from: ${OLD_COMMIT}
		cat "${diff}"
	else
		echo No differences from: ${OLD_COMMIT}
	fi

	if [[ -n ${GIT_BASE_BRANCH} ]]; then
		# pull request
		diff=$(mktemp)
		# disable colors as ANSI escape codes aren't interpreted in github comments
		pkgcruft diff --color false --sort "${CACHE}/${OLD_COMMIT}" "${FILE}" > "${diff}"

		# determine header
		header=$(mktemp)
		if [[ -s ${diff} ]]; then
			echo "Differences from: ${GIT_BASE_BRANCH}..${NEW_COMMIT_SHORT}" >> "${header}"
		else
			echo "No differences from: ${GIT_BASE_BRANCH}..${NEW_COMMIT_SHORT}" >> "${header}"
		fi

		# output info
		cat "${header}"
		cat "${diff}"

		# add PR comment using diff format
		pr=$(mktemp)
		echo '```diff' >> "${pr}"
		cat "${header}" >> "${pr}"
		cat "${diff}" >> "${pr}"
		echo '```' >> "${pr}"
		gh pr comment ${GH_PR} -F "${pr}"
	elif [[ ${GIT_BRANCH} != ${GIT_DEFAULT_BRANCH} ]]; then
		diff=$(mktemp)
		pkgcruft diff --color --sort "${CACHE}/${OLD_COMMIT}" "${FILE}" > "${diff}"
		# output diff if changes exists
		if [[ -s ${diff} ]]; then
			echo Differences from default branch: ${GIT_DEFAULT_BRANCH}
			cat "${diff}"
		else
			echo No differences from default branch: ${GIT_DEFAULT_BRANCH}
		fi
	fi

	# save results to cache for non-pr runs
	if [[ -z ${GIT_BASE_BRANCH} ]]; then
		mv "${FILE}" "${CACHE}/${NEW_COMMIT}"
	fi
)

status=$?

# verify expected exit status for tests
if [[ -n ${_PKGCRUFT_ACTION_EXIT_STATUS} ]]; then
	[[ ${_PKGCRUFT_ACTION_EXIT_STATUS} == ${status} ]] && exit 0
fi

exit ${status}
